When would you want to use a remote repository rather than keeping all your work local?

  When you are working a project that requires a lot of changes, working with others, working on a project that has different versions, and many others.
 project (i.e a new feature or language version)

 	Clones - Copying one repository to another location

 	Forks - A clone on GitHub
 Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

 	Because the changes that are on GitHub may not be something you want to have locally. For example, if a collaborator was working a project with you and they put up the wrong file in the repository, you wouldn't want to pull that.

 Describe the differences between forks, clones, and branches. When would you use one instead of another?

 	Forks - When you copy a repository from one GitHub user to your account. When you would want to borrow someone else's code for a project and modify it for your own.

 	Clone - When you copy a repository on your local machine or between GitHub and your local machine. If you wanted to copy a respository on your local machine to help kickstart a similar project.

 	Branches - Different lines of commits, creating different histories. Used in developing new features or when collaborating with someone else.

 What is the benefit of having a copy of the last known state of the remote stored locally?

 	You can see what the latest commits have been which could be useful if you are going offline and need to reference the latest work of a collaborator.

 How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

 	I would work on a shared server or through email. It would be easier since you wouldn't have to interact with the terminal and could have more face/face contact. It would be harder b/c you couldn't check versions as easily and compare differences between your code.

 When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

 	When you are working on a new feature that you would want to eventually add. If you worked directly in master then you would have one single branch and wouldn't need worry about switching between multiple branches which is simpler. However, if you are working with others or are working on a more complex feature then having other branches is useful for testing/quality checking.